Forecast <- function() 
{
library(randomForest)
setwd("D://P//Analytics//Kaggle//Rossmann Store Sales//WD")

##For train data set
#Data_0 <- (read.table('train.csv', sep=',', header=T))
##For train data set

##For test data set
Data_0 <- (read.table('test.csv', sep=',', header=T))
##For test data set



Data_1 <- subset(Data_0,Data_0$Open == 1) 

##For test data set
Data_1 <- Data_0
##For test data set


store_01 <- read.table('store.csv', sep=',', header=T)
store <- cbind(store_01,Cluster=paste(store_01$StoreType,store_01$Assortment,sep=""))


data <- merge(Data_1,store,by="Store")
Week <- ""
Week_1 <- ""
Year<- ""
Month <- ""
Promo2X <- ""
Month_Dig <- "" 
numeric_1 <- ""
numeric_2 <- ""
numeric_3 <- ""
numeric_4 <- ""
Promo2SinceWeek_01 <- ""
CompOpenMonth <- ""
for(i in 1:nrow(data))
{
  date <- data$Date
  #Week[i]<- strftime(date[i], format = "%y%W")
  Week[i]<- strftime(date[i], format = "%W")
  Year[i]<- strftime(date[i], format = "%Y")
  Month[i] <- strftime(date[i], format = "%b")
  Month_Dig[i] <- strftime(date[i], format = "%m")
  Promo2X[i] = 0
  Week[i] <-  as.numeric(Week[i])+1
  numeric_4[i] <- ""
  numeric_3[i] <- ""
  Promo2SinceWeek_01[i] <- ""
  CompOpenMonth[i] <- ""
  
  if (!is.na(data$CompetitionOpenSinceYear[i]) & !is.na(data$CompetitionOpenSinceMonth[i]))
  {
    CompOpenMonth[i] <- data$CompetitionOpenSinceMonth[i]
    if (as.numeric(data$CompetitionOpenSinceMonth[i]) < 10) 
    {
     CompOpenMonth[i] <- paste(c('0'),data$CompetitionOpenSinceMonth[i],sep="")
    }
    
    numeric_1[i] <- as.numeric(paste(data$CompetitionOpenSinceYear[i],as.character(CompOpenMonth[i]),sep="")) 
    numeric_2[i] <- as.numeric(paste(Year[i],as.character(Month_Dig[i]),sep=""))
    
    if (numeric_1[i] >= numeric_2[i]) 
    {
      data$CompetitionDistance[i] <- 1000000
    }
    
  }
  
  
  if (data$Promo2[i] == 1 )
  {
    Promo2SinceWeek_01[i] <- data$Promo2SinceWeek[i]
    if (as.numeric(data$Promo2SinceWeek[i]) < 10) 
    {
    (Promo2SinceWeek_01[i] <- paste(c('0'),data$Promo2SinceWeek[i],sep=""))
    } 
    
    Week_1[i]<- Week[i]
    
    if (as.numeric(Week[i]) < 10) 
    {
      Week_1[i]<- paste(c('0'),Week[i],sep="")
     
    }
    
    numeric_3[i] <- as.numeric(paste(data$Promo2SinceYear[i],as.character(Promo2SinceWeek_01[i]),sep=""))
    numeric_4[i] <- as.numeric(paste(Year[i],as.character(Week_1[i]),sep=""))
    if (numeric_3[i] <= numeric_4[i] )
  
    {
      s <- strsplit(as.character(data$PromoInterval[i]),',')
      if (is.na(as.logical(mapply(grep,Month[i],s))) == "FALSE")
      {  
         Promo2X[i] = 1  
      }
    
    }
  }
}
y <- cbind(data,Week,Year,Month,Promo2X )

##massaging Store data




##return(y)
##For train data set
#write.csv(y,file="Details.csv",row.names=FALSE) ## Write Results
##For train data set

##For test data set
write.csv(y,file="Details_Test.csv",row.names=FALSE) ## Write Results
##For test data set


}

Forecast1 <- function()
{
for(i in 1:nrow(data)){
  date <- data$Date
  Week[i]<- strftime(date[i], format = "%y%W")
}


}

Predict<- function() {

##x.1 <- read.table('Train_Subset_2014.csv', sep=',', header=T)
x.1 <- read.table('Details.csv', sep=',', header=T)
WeekofYear<- ""
#for (i in 1:nrow(x.1)){WeekofYear[i] = substr(x.1$Week[i],3,4)}
#x.2 <- cbind(x.1,WeekofYear)
#x.2 <- x.1

#store <- read.table('store.csv', sep=',', header=T)
#x.3<- merge(x.2,store,by="Store")

#y.1 <- subset(data,strftime(data$Date, format = "%Y") == 2015)
y.1 <- read.table('Details_Test.csv', sep=',', header=T)
x<- is.na(y.1$Open)
y.1$Open[x] <- 1
#store <- read.table('store.csv', sep=',', header=T)
x <- ""
x<- is.na(y.1$CompetitionDistance)
y.1$CompetitionDistance[x] <- 1000000

#y.3<- merge(y.1,store,by="Store")
y.3 <- y.1

## Model
#fit1<- lm(Sales~Promo+factor(DayOfWeek)+factor(WeekofYear)+StoreType+log(CompetitionDistance+1)+StateHoliday+factor(SchoolHoliday),subset(x.3,Open == 1))
#1
#fit1<- lm(Sales~Promo+factor(DayOfWeek)+StoreType+log(CompetitionDistance+1)+StateHoliday+factor(SchoolHoliday),subset(x.3,Open == 1))
#2
#fit1<- lm(Sales~Promo+factor(DayOfWeek)+StoreType+log(CompetitionDistance+1)+factor(SchoolHoliday),subset(x.3,Open == 1))

#3
#fit1<- lm(Sales~Promo+factor(DayOfWeek)+StoreType+log(CompetitionDistance+1)+factor(SchoolHoliday)+Assortment,subset(x.3,Open == 1))

#4
fit1<- lm(Sales~Promo+factor(DayOfWeek)+Promo2+log(CompetitionDistance+1)+factor(SchoolHoliday)+Cluster,subset(x.1,Month == "Aug"|Month == "Sep"|Month == "Jun"))

##Prediction
Sales.Predict =predict(fit1,y.3)

M<- matrix(Sales.Predict,ncol=1)
y.4 <- cbind(y.3,M)
M_1 <- y.4$M * y.4$Open
Sales.Predicted <- matrix(M_1,ncol=1)
#id <- ""
#for (i in 1:nrow(Sales.Predicted)){id[i] = i}
#M_id <- matrix(id,ncol=1)

Output_for_Kaggle <- cbind(y.4$Id ,Sales.Predicted)

df_Op <- as.data.frame(Output_for_Kaggle)
z <- c("Id","Sales")
names(df_Op) <- z

write.csv(df_Op,file="Output#3.csv",row.names=FALSE) ## Write Results
}
#identify if there is a trend YoY - can we forecast YoY trend ?
# find the weekly spread. project YoY uplift and spread across the week for 6 weeks?
#can we model time series and predict for next 6 weeks? (may not be pobble)
# make stores clsuters according to promo months  store type

RdmFcst <- function(split)
{
library(randomForest)

forestx.Comb <- ""
forestx.Temp <- "" 
forestx.1 <- "" 

split.num = as.numeric(split)
x <- as.integer(1115/ split.num)
x.1 <- read.table('Details.csv', sep=',', header=T)

for(i in 1:split.num)

{
  x <-  x * i
  if (i == split.num) { x <- 1200 }
  
  x.1_S01 <- subset(x.1,x.1$Year == 2014 & x.1$Store < x)
  x.1_S02 <- subset(x.1_S01,x.1_S01$Month == "Aug"|x.1_S01$Month == "Sep")
  x.1_S01 <- ""
  gc()
  x.1_Smp <- x.1_S02
  names(x.1_Smp) <- names(x.1)
  x.1_S02 <- ""
  x.1<- ""
  
  #gc()
  #forestx.1<- randomForest(x.1_Smp$Sales ~ x.1_Smp$Cluster + factor(x.1_Smp$DayOfWeek)+x.1_Smp$Promo +x.1_Smp$Promo2+log(x.1_Smp$CompetitionDistance+1)+factor(x.1_Smp$SchoolHoliday),data=x.1_Smp,prox=TRUE,ntree=100,na.action=na.omit)
  forestx.1<- randomForest(x.1_Smp$Sales ~ Cluster + factor(x.1_Smp$DayOfWeek)+ Promo,data=x.1_Smp,prox=TRUE,ntree=25,na.action=na.omit)

  
  if (split.num == 1)
  {
    forestx.Comb <- forestx.1
  }
  else
  {
    #forestx.Temp <- forestx.Comb
    forestx.Comb <- ""
    gc()
    j <- i-1
    if (i == split.num) 
    { 
      forestx.Comb <- combine(paste("forestx.Comb",j,sep=""),forestx.1)
    }
    else
    {
      paste("forestx.Comb",i,sep="") <- combine(paste("forestx.Comb",j,sep=""),forestx.1)
    }
    forestx.Temp <- ""
    forestx.1 <- ""
    gc()
  }

  
  
}

x.1_Smp <- ""
gc()

return(forestx.Comb$i)
}

FromKaggle <- function()
{
library(readr)
library(randomForest)

set.seed(616)

cat("reading the train and test data\n")
train <- read_csv("train.csv")
test  <- read_csv("test.csv")
store <- read_csv("store.csv")
train <- subset(train,Sales < 15000)
train <- merge(train,store)
test <- merge(test,store)

# There are some NAs in the integer columns so conversion to zero
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0

cat("train data column names and details\n")
names(train)
str(train)
summary(train)
cat("test data column names and details\n")
names(test)
str(test)
summary(test)

# looking at only stores that were open in the train set
# may change this later
train <- train[ which(train$Open=='1'),]

# seperating out the elements of the date column for the train set
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%y"))
train$day <- as.integer(format(train$Date, "%d"))

# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
train <- train[,-c(3,8)]

# seperating out the elements of the date column for the test set
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%y"))
test$day <- as.integer(format(test$Date, "%d"))

# removing the date column (since elements are extracted) and also StateHoliday which has a lot of NAs (may add it back in later)
test <- test[,-c(4,7)]

feature.names <- names(train)[c(1,2,6,8:12,14:19)]
cat("Feature Names\n")
feature.names

cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
  if (class(train[[f]])=="character") {
    levels <- unique(c(train[[f]], test[[f]]))
    train[[f]] <- as.integer(factor(train[[f]], levels=levels))
    test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
  }
}

# imputation to the mean (assuming 0 is missing value not lack of competition)

# this did not improve performance -- some zeroes are possibly missing data bit others may be no competitor

# train$CompetitionOpenSinceMonth[train$CompetitionOpenSinceMonth==0] <- mean(train$CompetitionOpenSinceMonth, na.rm=TRUE)
# train$CompetitionOpenSinceYear[train$CompetitionOpenSinceYear==0] <- mean(train$CompetitionOpenSinceYear, na.rm=TRUE)
#train$Promo2SinceWeek[train$Promo2SinceWeek==0] <- mean(train$Promo2SinceWeek, na.rm=TRUE)
# train$Promo2SinceYear[train$Promo2SinceYear==0] <- mean(train$Promo2SinceYear, na.rm=TRUE)

#test$CompetitionOpenSinceMonth[test$CompetitionOpenSinceMonth==0] <- mean(test$CompetitionOpenSinceMonth, na.rm=TRUE)
#test$CompetitionOpenSinceYear[test$CompetitionOpenSinceYear==0] <- mean(test$CompetitionOpenSinceYear, na.rm=TRUE)
#test$Promo2SinceWeek[test$Promo2SinceWeek==0] <- mean(test$Promo2SinceWeek, na.rm=TRUE)
#test$Promo2SinceYear[test$Promo2SinceYear==0] <- mean(test$Promo2SinceYear, na.rm=TRUE)

cat("checking all stores are accounted for\n")
length(unique(train$Store))

cat("train data column names after slight feature engineering\n")
names(train)
cat("test data column names after slight feature engineering\n")
names(test)

#train$DayOfWeek <- as.factor(train$DayOfWeek)

#p = 0.15

#dsample <- data.frame()

#for(i in levels(train$DayOfWeek)) {
#  dsub <- subset(train, train$DayOfWeek == i)
#  B = ceiling(nrow(dsub) * p)
#  dsub <- dsub[sample(1:nrow(dsub), B), ]
#  dsample <- rbind(dsample, dsub) 
#  }
  
#cat("dimensions of stratified sample set with every day of the week included\n")
#dim(dsample)

#dsample$DayOfWeek <- as.integer(dsample$DayOfWeek)
#cat("check structire of stratified sample\n")
#str(dsample)

clf <- randomForest(train[,feature.names], 
                    log(train$Sales+1),
                    mtry=5,
                    ntree=50,
                    sampsize=100000,
                    do.trace=TRUE)

cat("model stats\n")
clf
cat("print model\n")
print(clf)
cat("Importance 1\n")
importance(clf)
cat("Permutation Importance Unscaled\n")
importance(clf, type = 1)
cat("GINI Importance\n")
importance(clf, type = 2)
cat("Plot Model\n")
plot(clf)
cat("Plot Importance\n")
plot(importance(clf), lty=2, pch=16)


cat("Predicting Sales\n")

pred <- exp(predict(clf, test)) -1
submission <- data.frame(Id=test$Id, Sales=pred)

cat("saving the submission file\n")
write_csv(submission, "rf1.csv")
}
